/**
 *  Copyright (C) 2021 FISCO BCOS.
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * @file AuthInitializer.h
 * @author: kyonRay
 * @date 2021-11-24
 */

#pragma once
#include "libinitializer/ProtocolInitializer.h"
#include "libinitializer/StorageInitializer.h"
#include <bcos-framework/interfaces/executor/PrecompiledTypeDef.h>
#include <bcos-framework/libcodec/abi/ContractABICodec.h>
#include <bcos-framework/libtool/NodeConfig.h>
#include <bcos-framework/libutilities/Common.h>
#include <bcos-ledger/libledger/Ledger.h>
#include <interfaces/dispatcher/SchedulerInterface.h>

using namespace bcos;
using namespace bcos::tool;
using namespace bcos::initializer;
namespace bcos::initializer
{
// clang-format off
static const char* committeeBin = "608060405234801561001057600080fd5b506040516111a33803806111a38339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b03191633179055610060826001600160e01b0361008616565b600180546001600160a01b0319166001600160a01b03929092169190911790555061013b565b610098336001600160e01b036100f916565b6100d7576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03821630141561011457506001610136565b6000546001600160a01b038381169116141561013257506001610136565b5060005b919050565b6110598061014a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063315ce5e21161008c5780636f2904cc116100665780636f2904cc146102f2578063b2bdfa7b146102fa578063bc903cb814610302578063cd5d21181461040b576100ea565b8063315ce5e214610272578063401853b7146102a65780636d23cd58146102c3576100ea565b806319dcd07e116100c857806319dcd07e146101955780631cc05cbc146101c857806320d154da146102095780632c3956fe14610235576100ea565b80630a494840146100ef57806313af403514610149578063185c158714610171575b600080fd5b61010c6004803603602081101561010557600080fd5b5035610445565b604080516001600160a01b03968716815294909516602085015260ff92831684860152606084019190915216608082015290519081900360a00190f35b61016f6004803603602081101561015f57600080fd5b50356001600160a01b031661048a565b005b6101796104f4565b604080516001600160a01b039092168252519081900360200190f35b6101b2600480360360208110156101ab57600080fd5b5035610503565b6040805160ff9092168252519081900360200190f35b6101f7600480360360408110156101de57600080fd5b50803560ff1690602001356001600160a01b03166105b4565b60408051918252519081900360200190f35b61016f6004803603604081101561021f57600080fd5b50803590602001356001600160a01b03166105d1565b6101f76004803603608081101561024b57600080fd5b506001600160a01b03813581169160ff6020820135169160408201351690606001356106e7565b6101b26004803603606081101561028857600080fd5b508035906020810135151590604001356001600160a01b0316610929565b6101b2600480360360208110156102bc57600080fd5b5035610cda565b6101f7600480360360408110156102d957600080fd5b50803560ff1690602001356001600160a01b0316610cf6565b6101f7610d24565b610179610d2a565b61031f6004803603602081101561031857600080fd5b5035610d39565b60405180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b031681526020018660ff1660ff1681526020018581526020018460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103b1578181015183820152602001610399565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156103f05781810151838201526020016103d8565b50505050905001995050505050505050505060405180910390f35b6104316004803603602081101561042157600080fd5b50356001600160a01b0316610e47565b604080519115158252519081900360200190f35b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b03918216939182169260ff600160a01b90930483169290911685565b61049333610e47565b6104d2576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b600081815260036020819052604082200154829060ff16610560576040805162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b604482015290519081900360640190fd5b60008381526003602081905260409091209081015460ff16600114156105a45780600201544311156105a457600301805460ff1916600590811790915591506105ae565b6003015460ff1691505b50919050565b600460209081526000928352604080842090915290825290205481565b6105da33610e47565b610619576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015290519081900360640190fd5b600082815260036020526040902061063083610503565b60ff166001146106715760405162461bcd60e51b815260040180806020018281038252602a815260200180610ffa602a913960400191505060405180910390fd5b60018101546001600160a01b038381169116146106d5576040805162461bcd60e51b815260206004820152601860248201527f4f6e6c792070726f706f7365722063616e207265766f6b650000000000000000604482015290519081900360640190fd5b600301805460ff191660041790555050565b60006106f233610e47565b610731576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015290519081900360640190fd5b60ff80851660009081526004602090815260408083206001600160a01b0388168452825280832054808452600392839052922001549091166001141561077c5761077a81610503565b505b6000818152600360208190526040909120015460ff16600114156107e7576040805162461bcd60e51b815260206004820152601860248201527f43757272656e742070726f706f73616c206e6f7420656e640000000000000000604482015290519081900360640190fd5b60028054600101908190556060806107fd610f18565b506040805160e0810182526001600160a01b03808a1682528b8116602080840191825260ff808e16858701908152438d016060870190815260016080880181815260a089018c815260c08a018c905260008e815260038089529b90208a518154908b166001600160a01b03199182161782559851938101805496518816600160a01b0260ff60a01b1995909b1696909916959095179290921697909717909555516002820155935195840180549690911660ff1990961695909517909455518051929384936108d29260048501920190610f6d565b5060c082015180516108ee916005840191602090910190610f6d565b50505060ff891660009081526004602090815260408083206001600160a01b038c168452909152902084905550919350505050949350505050565b600061093433610e47565b610973576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015290519081900360640190fd5b60008481526003602081905260409091200154849060ff166109d1576040805162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b604482015290519081900360640190fd5b600085815260036020818152604092839020835160e08101855281546001600160a01b03908116825260018301549081168285015260ff600160a01b909104811682870152600283015460608301529382015490931660808401526004810180548551818502810185019096528086529194610afa9493869360a086019391830182828015610a8957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a6b575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610aeb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610acd575b50505050508152505085610e88565b15610b3c576040805162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b604482015290519081900360640190fd5b8415610b7757600481018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038616179055610ba8565b600581018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0386161790555b600154604080516353bfcf2f60e01b8152600481810192835284018054604483018190526000946001600160a01b0316936353bfcf2f9360058801928291602481019160649091019086908015610c2857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c0a575b50508381038252848181548152602001915080548015610c7157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c53575b505094505050505060206040518083038186803b158015610c9157600080fd5b505afa158015610ca5573d6000803e3d6000fd5b505050506040513d6020811015610cbb57600080fd5b5051600392909201805460ff191660ff84161790555095945050505050565b6000818152600360208190526040909120015460ff165b919050565b60ff821660009081526004602090815260408083206001600160a01b03851684529091529020545b92915050565b60025481565b6000546001600160a01b031681565b600081815260036020818152604092839020805460018201546002830154948301546004840180548851818802810188019099528089526001600160a01b039485169894841697600160a01b90940460ff908116979496931694606094859493919290830182828015610dd557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db7575b5050505050925080600501805480602002602001604051908101604052809291908181526020018280548015610e3457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e16575b5050505050915050919395979092949650565b60006001600160a01b038216301415610e6257506001610cf1565b6000546001600160a01b0383811691161415610e8057506001610cf1565b506000610cf1565b6000610e988360a0015183610ec2565b80610eac5750610eac8360c0015183610ec2565b15610eb957506001610d1e565b50600092915050565b6000805b8351811015610f0e57838181518110610edb57fe5b60200260200101516001600160a01b0316836001600160a01b03161415610f06576001915050610d1e565b600101610ec6565b5060009392505050565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff16815260200160008152602001600060ff16815260200160608152602001606081525090565b828054828255906000526020600020908101928215610fc2579160200282015b82811115610fc257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610f8d565b50610fce929150610fd2565b5090565b610ff691905b80821115610fce5780546001600160a01b0319168155600101610fd8565b9056fe4f6e6c79206e65776c7920637265617465642070726f706f73616c2063616e206265207265766f6b6564a264697066735822122085af611dbd377be216f6ea0352ecf58b793adfffbf4e666af5b0572afd1890f664736f6c634300060a0033";
// clang-format on

class AuthInitializer
{
public:
    static void init(protocol::BlockNumber _number,
        const std::shared_ptr<ProtocolInitializer>& _protocol,
        const std::shared_ptr<NodeConfig>& _nodeConfig,
        const bcos::scheduler::SchedulerInterface::Ptr& _scheduler)
    {
        auto block = _protocol->blockFactory()->createBlock();
        block->blockHeader()->setNumber(_number);

        // hex bin code to bytes
        bytes code;
        boost::algorithm::unhex(committeeBin, std::back_inserter(code));

        // constructor (address[] initGovernors,    = [authAdminAddress]
        //        uint32[] memory weights,          = [0]
        //        uint8 participatesRate,           = 0
        //        uint8 winRate)                    = 0
        std::vector<Address> initGovernors({Address(_nodeConfig->authAdminAddress())});
        std::vector<string32> weights({bcos::codec::toString32(h256(0))});

        // bytes code + abi encode constructor params
        codec::abi::ContractABICodec abi(_protocol->cryptoSuite()->hashImpl());
        bytes input = code + abi.abiIn("", initGovernors, weights, codec::toString32(h256(0)),
                                 codec::toString32(h256(0)));

        auto tx = _protocol->blockFactory()->transactionFactory()->createTransaction(3,
            precompiled::AUTH_COMMITTEE_ADDRESS, input, u256(_number), 500, _nodeConfig->chainId(),
            _nodeConfig->groupId(), utcTime());
        block->appendTransaction(tx);
        INITIALIZER_LOG(DEBUG) << LOG_BADGE("AuthInitializer")
                               << LOG_KV("initTxHash", tx->hash().hex());

        std::promise<bcos::protocol::BlockHeader::Ptr> executedHeader;
        _scheduler->executeBlock(block, false,
            [&](bcos::Error::Ptr&& _error, bcos::protocol::BlockHeader::Ptr&& _header) {
                if (_error)
                {
                    INITIALIZER_LOG(ERROR) << LOG_BADGE("AuthInitializer")
                                           << LOG_KV("errorMsg", _error->errorMessage());
                    BOOST_THROW_EXCEPTION(
                        BCOS_ERROR(-1, "AuthInitializer: scheduler executeBlock error"));
                }
                INITIALIZER_LOG(DEBUG)
                    << LOG_BADGE("AuthInitializer") << LOG_DESC("scheduler execute block success!");
                executedHeader.set_value(std::move(_header));
            });
        auto header = executedHeader.get_future().get();

        std::promise<bcos::ledger::LedgerConfig::Ptr> committedConfig;
        _scheduler->commitBlock(
            header, [&](Error::Ptr&& _error, bcos::ledger::LedgerConfig::Ptr&& _config) {
                if (_error)
                {
                    INITIALIZER_LOG(ERROR) << LOG_BADGE("AuthInitializer")
                                           << LOG_KV("errorMsg", _error->errorMessage());
                    BOOST_THROW_EXCEPTION(
                        BCOS_ERROR(-1, "AuthInitializer: scheduler commitBlock error"));
                }
                committedConfig.set_value(_config);
            });
        auto newConfig = committedConfig.get_future().get();
        if (newConfig->blockNumber() != _number + 1)
        {
            INITIALIZER_LOG(ERROR) << LOG_BADGE("AuthInitializer") << LOG_DESC("");
            BOOST_THROW_EXCEPTION(
                BCOS_ERROR(-1, "AuthInitializer: blockNumber mismatch"));
        }
    }
};
}  // namespace bcos::initializer